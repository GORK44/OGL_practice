#version 330 core

out vec4 FragColor;

in vec3 Normal; //片元法向量
in vec3 FragPos; //片元在世界空间坐标

uniform vec3 objectColor; //物体的颜色
uniform vec3 lightColor; //光源的颜色
uniform vec3 lightPos; //光源的位置
uniform vec3 viewPos; //相机位置

void main()
{
    //环境光照
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor; //环境光照

    //漫反射光照
    vec3 norm = normalize(Normal); //标准化 法向量
    vec3 lightDir = normalize(lightPos - FragPos); //标准化 光照方向
    float diff = max(dot(norm, lightDir), 0.0); //漫反射分量：法向量 · 光方向（大于0）
    vec3 diffuse = diff * lightColor; //漫反射光照

    //镜面光照 specular
    float specularStrength = 0.5; //镜面强度
    vec3 viewDir = normalize(viewPos - FragPos); //标准化 相机方向
    vec3 reflectDir = reflect(-lightDir, norm); //反射光方向（光源指向片段位置的向量，法向量）
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); //镜面分量：【 (相机方向 · 反射方向)^32 】
    vec3 specular = specularStrength * spec * lightColor; //镜面光照

    vec3 result = (ambient + diffuse + specular) * objectColor; //相加，结果乘以物体颜色，获得片段输出颜色
    FragColor = vec4(result, 1.0);
}
