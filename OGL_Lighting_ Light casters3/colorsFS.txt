#version 330 core

out vec4 FragColor;

in vec3 Normal; //片元法向量
in vec3 FragPos; //片元在世界空间坐标
in vec2 TexCoords;


//材质
struct Material {
    sampler2D diffuse; // 漫反射贴图
    sampler2D specular; // 镜面反射贴图（镜面反射光照下 物体反射的颜色）
    float shininess; // 镜面高光的散射/半径
};

//灯光
struct Light {
    vec3 direction; // 平行光 (从光源出发的全局方向)
    vec3 position; // 在世界空间的 坐标
    float cutOff; // 聚光半径的切光角（的余弦）（落在这个角度之外的物体都不会被这个聚光所照亮）
    float outerCutOff; // 外圆锥角

    vec3 ambient; // 光源的 环境光 强度（通常比较低）
    vec3 diffuse; // 光源的 漫反射 强度（通常为光的颜色，稍微暗一点搭配场景）
    vec3 specular; // 光源的 镜面反射 强度（通常会保持为vec3(1.0)，以最大强度发光）

    //点光源衰减公式
    float constant; //常数项
    float linear; //一次项
    float quadratic; //二次项
};


uniform vec3 viewPos; //相机位置
uniform Material material; //把材质放到全局
uniform Light light; //把灯光放到全局


void main()
{

        //环境光照
        vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb; //环境光照

        //漫反射光照
        vec3 norm = normalize(Normal); //标准化 法向量
        vec3 lightDir = normalize(light.position - FragPos); //标准化 光照方向 (片元指向光源)
        float diff = max(dot(norm, lightDir), 0.0); //漫反射分量（法向量 · 光方向）（大于0）
        vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb; //漫反射光照

        //镜面光照 specular
        vec3 viewDir = normalize(viewPos - FragPos); //标准化 相机方向
        vec3 reflectDir = reflect(-lightDir, norm); //反射光方向（光源指向片段位置的向量，法向量）
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); //镜面分量：【 (相机方向 · 反射方向)^32 】
        vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb; //镜面光照


        // 聚光（平滑边缘）spotlight (soft edges)
        float theta = dot(lightDir, normalize(-light.direction)); // 光照角 的余弦
        float epsilon = (light.cutOff - light.outerCutOff); //内外圆锥之差
        float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); //（余弦大减小，角度小减大）（外圆锥角-光照角）/（外圆锥角-内圆锥角）（光照在内圆角内时，始终=1；在内外圆锥之间时，范围【0，1】）
        diffuse  *= intensity;
        specular *= intensity;


        // 衰减 attenuation
        float distance    = length(light.position - FragPos); //离光源距离
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); //衰减公式

        ambient  *= attenuation; //乘 衰减度
        diffuse   *= attenuation;
        specular *= attenuation;


        vec3 result = ambient + diffuse + specular; //相加

        FragColor = vec4(result, 1.0);




}


