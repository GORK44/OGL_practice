#version 330 core

out vec4 FragColor;

in vec3 Normal; //片元法向量
in vec3 FragPos; //片元在世界空间坐标
in vec2 TexCoords;


//材质
struct Material {
    sampler2D diffuse; // 漫反射贴图
    vec3 specular; // 镜面反射光照下 物体反射的颜色
    float shininess; // 镜面高光的散射/半径
};

//灯光
struct Light {
    vec3 position; //灯位置

    vec3 ambient; // 光源的 环境光 强度（通常比较低）
    vec3 diffuse; // 光源的 漫反射 强度（通常为光的颜色，稍微暗一点搭配场景）
    vec3 specular; // 光源的 镜面反射 强度（通常会保持为vec3(1.0)，以最大强度发光）
};


uniform vec3 viewPos; //相机位置
uniform Material material; //把材质放到全局
uniform Light light; //把灯光放到全局


void main()
{
    //环境光照
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb; //环境光照

    //漫反射光照
    vec3 norm = normalize(Normal); //标准化 法向量
    vec3 lightDir = normalize(light.position - FragPos); //标准化 光照方向
    float diff = max(dot(norm, lightDir), 0.0); //漫反射分量：法向量 · 光方向（大于0）
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb; //漫反射光照

    //镜面光照 specular
    vec3 viewDir = normalize(viewPos - FragPos); //标准化 相机方向
    vec3 reflectDir = reflect(-lightDir, norm); //反射光方向（光源指向片段位置的向量，法向量）
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); //镜面分量：【 (相机方向 · 反射方向)^32 】
    vec3 specular = light.specular * (spec * material.specular); //镜面光照

    vec3 result = ambient + diffuse + specular; //相加

    FragColor = vec4(result, 1.0);

}


